<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Java on Hans Kruse</title><link>https://hanskruse.eu/categories/java/</link><description>Recent content in Java on Hans Kruse</description><generator>Hugo -- gohugo.io</generator><copyright>Copyright © 2014–2020, Hans Kruse all rights reserved.</copyright><lastBuildDate>Tue, 04 Sep 2018 08:25:14 +0200</lastBuildDate><atom:link href="https://hanskruse.eu/categories/java/index.xml" rel="self" type="application/rss+xml"/><item><title>Vanilla Java for stream copy</title><link>https://hanskruse.eu/post/2018-09-04-vanilla-java/</link><pubDate>Tue, 04 Sep 2018 08:25:14 +0200</pubDate><guid>https://hanskruse.eu/post/2018-09-04-vanilla-java/</guid><description>In the JavaScript community, not long ago, there was a discussion about using a library versus rolling your own implementation to achieve certain goals. Since there seems to be a new hot and happy JavaScript framework every two months or so, rolling your may be attrative to some people. It even has a name Vanilla JavaScript. Someone even proposed Vanilla-JS framework framework&amp;hellip; ;). But how is that for Java? Java used to be slower paced but even here we have the problem of overchoise.</description></item></channel></rss>