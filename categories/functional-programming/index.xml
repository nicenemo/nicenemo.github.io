<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Functional programming on Hans Kruse</title>
    <link>https://hanskruse.eu/categories/functional-programming/</link>
    <description>Recent content in Functional programming on Hans Kruse</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>Copyright © 2014–2019, Hans Kruse  all rights reserved.</copyright>
    <lastBuildDate>Fri, 08 Feb 2019 08:56:38 +0100</lastBuildDate>
    
	<atom:link href="https://hanskruse.eu/categories/functional-programming/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>The super lazy iterator in C# and Java</title>
      <link>https://hanskruse.eu/post/2019-02-08-super-iterator/</link>
      <pubDate>Fri, 08 Feb 2019 08:56:38 +0100</pubDate>
      
      <guid>https://hanskruse.eu/post/2019-02-08-super-iterator/</guid>
      <description>A super lazy iterator is known by functional programmers as the List Monad. This is not another Monad tutorial but focusses on what was added to C# and Java to allow retrofitting this super lazy iterator to C# and Java.
With this super iterator you can:
 Iterate over a collection skipping elements by predicate. where clause or filter. Project the elements in a collection into something different select clause, project or map.</description>
    </item>
    
  </channel>
</rss>